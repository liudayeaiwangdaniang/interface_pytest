    前置后置：
    unittest：
        setup/teardown
        setupClass，tearDownClass

    fixture：
        先定义再调用
        定义：
        1.函数实现的，函数名称不固定。--- 如何知道它是前置后置？
          @pytest.fixture
          def fix():
            pass
        2.前置操作和后置操作，写在一个函数里。-- 怎么区分哪些是前置代码？后置代码？
          @pytest.fixture
          def fix():
            前置代码
            yeild  #分割线
            后置代码
        3.4个作用域。测试函数（function）、测试类（class）、测试模块文件（module）、测试会话（session）
          @pytest.fixture（scope=function(默认值)/class/module/session）
          def fix():
            前置代码
            yeild  #分割线
            后置代码
        4.不跟测试类/测试函数放在一起   ---如果有测试类需要用，怎么办，---调用
        5.前置操作得到的一些数据怎么传递给测试用例？
            yeild 返回值

           在测试用例当中，以fixture函数名作为用例参数，用例参数接受返回值
           测试函数的参数 1.fixture   2.ddt
        6.共享机制：conftest.py
            conftest.py   定义fixture，可以定义多个

    调用：
        用例/类 主动调用 fixtures

        哪儿需要哪儿调

        @pytest.mark.usefixtures("fixture的函数名称")
        测试类/测试函数

        如果fixture有返回值
        那么，将它作为测试函数的参数时，则可以不使用@pytest.mark.usefixtures("fixture的函数名称")

    共享机制：conftest.py
        1、放的都是fixture
        2、fixtures可以对外共享
        3、共享的范围：
            当前conftest.py所在目录下的（子孙目录），所有用例共享
        4、conftest.py 是可以创建多个，在不同的包下，可以层级创建的
        5、优先级，就近原则！！
            发现fixture：用例自己的模块 → 用例所在目录下的conftest.py → 目录的父级目录下的conftest.py
        6、嵌套方式：
            6.1 什么时候嵌套?  一个fixture，想完全使用另一个fixture，并在人家的基础上新增一些代码
            6.2 怎么嵌套？
            @pytest.fixture
            def fix1()
                pass
            @pytest.fixture
            def fix2(fix1)
                # 新增的代码
                pass
            6.3    嵌套后的执行顺序
                fix1 的前置
                fix2 的前置
                fix2 的后置
                fix1 的后置

            6.4 可以任意fixture级别嵌套吗？
            fix1 >= fix2 级别
    数据驱动实现
    @pytest.mark.parametrize("参数名",列表数据)

    @pytest.mark.parametrize("a",[(1,3,4),(10,35,45),(22,32,42,2)])
    def test_add(a):
        print(a)

    @pytest.mark.parametrize("a,b,c",[(1,3,4),(10,35,45),(22,32,42)])
    def test_add1(a,b,c):
        print(a,b,c)

    打标记：mark功能
            对用例打标记，运行的时候，只运行打标记的用例
            300个回归用例。--打标记50个，作为冒烟测试，

            1、得先注册标记名
                pytest.ini
                [pytest]
                 markers=
                    mark1:说明（只能是英文）
                    mark2
                    mark3
            2、给测试用例/测试类打标记
                @pytest.mark.已注册的标记名
                或者在类/文件里边最前边加pytestmark = pytest.mark.nmb

            3、运行时设置只运行标记的用例
                pytest命令行： -m 标记名
                在收集到的所有用例当中，只运行有标记名的用例

    失败用例重运行机制：
        用例失败的情况下，可以重运行用例
        一旦用例失败，马上重运行，重运行次数？
            pytest提供了失败重试机制
        插件名称：rerunfailures
        安装方法：pip install pytest-rerunfailures

        使用方式：
        命令行参数形式：
        命令：pytest -- reruns 重试次数
        比如：pytest --reruns 2  表示：运行失败的用例可以重新运行2次

        命令：pytest --reruns 重试次数 --reruns-delay 次数之间的延时设置（单位：秒）
            pytest --reruns 2 --reruns-delay 5
            表示失败的用例可以重新运行2次，第一次和第二次的间隔时间是5秒
